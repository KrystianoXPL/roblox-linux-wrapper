#!/usr/bin/env bash
#
#    Copyright 2017 Jonathan Alfonso <alfonsojon1997@gmail.com>
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.

# Some internal functions to make wine more useful to the wrapper.
# This allows the wrapper to know what went wrong and where, without excessive code.
# Note: functions prefixed with "r" indicate wrappers that extend system functionality.
spawndialog () {
	zenity \
		--no-wrap \
		--window-icon="$RBXICON" \
		--title="$rlwversionstring" \
		--"$1" \
		--text="$2" 2&> /dev/null
}

rwine () {
	printf '%b\n' "> rwine: calling wine with arguments \"$(printf "%s " "$@")\""
	if [[ "$1" = "--silent" ]]; then
		$WINE "${@:2}" && rwineserver --wait
	else
		$WINE "$@" && rwineserver --wait; [[ "$?" = "0" ]] || {
			spawndialog error "wine closed unsuccessfully.\nSee terminal for details. (exit code $?)"
			exit $?
	}
	fi
}
rwineboot () {
	printf '%b\n' " > Calling wineboot..."
	$winebootbin; [[ "$?" = "0" ]] || {
		spawndialog error "wineboot closed unsuccessfully.\nSee terminal for details. (exit code $?)"
		exit $?
	}
}
rwineserver () {
	printf '%b\n' "> rwineserver: calling wineserver with arguments \"$(printf "%s " "$@")\""
	$WINESERVER "$@"; [[ "$?" = "0" ]] || {
		spawndialog error "wineserver closed unsuccessfully.\nSee terminal for details. (exit code $?)"
		exit $?
	}
}

rwinetricks () {
	printf '%b\n' "> rwinetricks: calling winetricks with arguments \"$(printf "%s " "$@")\""

	# For consistency purposes, we'll use our own bundled winetricks version.
	if [[ "$WRAPPER_DIR" == "/usr/bin" ]]; then
		winetricksbin="/usr/lib/roblox-linux-wrapper/winetricks"
	else
		winetricksbin="thirdparty/winetricks/src/winetricks"
	fi
	printf '%b\n' "> rwinetricks: winetricks path set to $winetricksbin"
	$winetricksbin "$@"
	[[ "$?" = "0" ]] || {
		spawndialog error "winetricks failed. \nSee terminal for details. (exit code $?)"
		exit $?
	}
}

roblox-install () {
	if [[ ! -d "$WINEPREFIX/drive_c" ]]; then
		spawndialog question 'A working Roblox wineprefix was not found.\nWould you like to install one?'
		if [[ $? = "0" ]]; then
			rm -rf "$WINEPREFIX"
			# Make sure our directories really exist
			mkdir -p "$HOME/.local/share/wineprefixes"
			rwineboot
			rwinetricks vcrun2013 ddr=opengl sound=alsa wininet winhttp d3dx9_43
				# ddr=opengl:	Fix black game window per https://github.com/roblox-linux-wrapper/roblox-linux-wrapper/issues/156
				#		(this used to be set to ddr=gdi)
				# sound=alsa:	Fix for crackling sound under Ubuntu 14.04
			[[ "$?" = 0 ]] || {
				spawndialog error "Wine prefix not generated successfully.\nSee terminal for more details. (exit code $?)"
				exit $?
			}

			# Removed firefox installation since it doesn't work with roblox anymore.

			# Associate roblox-player and roblox-studio protocols
			# TODO add install in case of deb file
			printf "Installing Roblox protocols, so you can simply click play on any game page to enter the game!\n"

			BASEDIR=$(dirname "$0")
			launchers_dest_dir="$HOME/.local/share/applications"
			mkdir -p "$HOME/.rlw/handlers"
			handlers_dest_dir="$HOME/.rlw/handlers"
			handlers_dir="$BASEDIR/protocols/handlers"
			launchers_dir="$BASEDIR/protocols/launchers"

			if [ ! -d "$launchers_dir" ]; then
				spawndialog error "Missing launchers directory. is it located where the main script is?\n"
				exit 0
			fi

			#DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

			xdg-mime default "roblox-player.desktop" x-scheme-handler/roblox-player
			xdg-mime default "roblox-studio.desktop" x-scheme-handler/roblox-studio

			# Copy all the files
			if [ ! -f "$handlers_dest_dir/roblox-player.sh" ]; then
  			install -m 755 $handlers_dir/* $handlers_dest_dir/
  			install -m 755 $launchers_dir/* $launchers_dest_dir/
			else
  			printf "Files already copied. Skipping ...\n"
			fi

			if [[ "$WRAPPER_DIR" != "/usr/bin" ]]; then
				mkdir -p "$HOME/.local/share/icons/hicolor/scalable/apps"
				install -m 755 "$BASEDIR/roblox.svg" "$HOME/.local/share/icons/hicolor/scalable/apps/"
			fi

			[[ "$?" = 0 ]] || {
				spawndialog error "An error has occured during protocol installation\nSee terminal for more details (exit code $?)"
			}
			printf "Installing protocols finished. Hopefuly it was succesfull\n"

			wget http://roblox.com/install/setup.ashx -O /tmp/RobloxPlayerLauncher.exe
			chmod +x /tmp/RobloxPlayerLauncher.exe
			WINEDLLOVERRIDES="winemenubuilder.exe=" rwine /tmp/RobloxPlayerLauncher.exe
		else
			exit 1
		fi
	fi
}

wineinitialize () {
	# Evaluate the Wine path selection, and base the wineboot/wineserver
	# paths off that.
	source "$HOME/.rlw/wine_choice"
	if [[ "$WINE" == *"-development" ]]; then
		# Debian uses different paths for their packaging of Wine 1.7 (namely, the binaries have a -development suffix)...
		winebin_suffix="-development"
	fi
	winebootbin="$(dirname "$WINE")/wineboot${winebin_suffix}"
	WINESERVER="$(dirname "$WINE")/wineserver${winebin_suffix}"
	if [[ ! -x "$WINESERVER" && "$(lsb_release -is)" == "Debian" ]]; then
		# Debian also sticks wineserver in /usr/lib, not /usr/bin or anywhere remote accessible via $PATH, ugh...
		# I really don't like hardcoding the architecture here, but it's the best we can do for now.
		WINESERVER="/usr/lib/i386-linux-gnu/wine${winebin_suffix}/wineserver"
	fi
	for x in "$WINE" "$winebootbin" "$WINESERVER"; do
		if [[ -x "$x" ]]; then
			printf "%b\n" "$(basename "$x") path set to $x"
		else
			spawndialog error "Could not find $(basename "$x") at $x. Are you sure a copy is installed there?"
			winechooser
			break
		fi
	done
	export WINE
	export WINESERVER
	[[ "$($WINE --version | cut -f 1 -d ' ' | sed 's/.*?-//')" > "1.7.27" ]] || {
		spawndialog error "Your copy of Wine is too old. Please install version 1.7.28 or greater.\n(expected 1.7.28, got $(wine --version | cut -f 1 -d ' ' | sed 's/.*-//'))"
		exit 1
	}
}

winechooser () {
	sel=$(zenity \
			--title "Wine Release Selection" \
			--width=480 \
			--height=250 \
			--cancel-label='Exit' \
			--list \
			--text 'Select the version of Wine you want to use:' \
			--radiolist \
			--column '' \
			--column 'Options' \
			TRUE 'Automatic detection (via $PATH)' \
			FALSE '/usr/bin/wine' \
			FALSE '/opt/wine-staging/bin/wine' \
			FALSE '/usr/bin/wine-development' \
			FALSE 'Enter custom Wine path...')
	case $sel in
		'Enter custom Wine path...')
			WINE=$(zenity --title "Wine Release Selection" \
					  --text "Enter custom Wine path:" --entry);;
		'Automatic detection (via $PATH)')
			# Here, we will literally save '$(which wine)' as the path
			# so it changes dynamically and isn't immediately evaluated.
			WINE='$(which wine)'
			real_wine="$(eval "echo $WINE")"
			winebootbin="$(dirname "$real_wine")/wineboot"
			WINESERVER="$(dirname "$real_wine")/wineserver"
			for x in "$real_wine" "$winebootbin" "$WINESERVER"; do
				if [[ ! -x "$x" ]]; then
					spawndialog error "Missing dependencies! Please install wine somewhere in "'$PATH'", or select a custom path instead.\nDetails: Could not find $(basename "$x") at $x. Are you sure a copy is installed there?"
					exit 1
				fi
			done;;
		*)
			WINE="$sel"
	esac
	printf "%b\n" "Wine path set to: $WINE"
	if [[ -z "$WINE" ]]; then
		printf "%b\n" "Clearing Wine choice..."
		rm -f "$HOME/.rlw/wine_choice"
		spawndialog error "You must enter a valid path."
		winechooser
	else
		printf "%b\n" "Saving Wine choice to ~/.rlw/wine_choice"
		mkdir -p "$HOME/.rlw/"
		echo "WINE=$WINE" > "$HOME/.rlw/wine_choice"
	fi
	wineinitialize
}

main () {
	rm -f $HOME/Desktop/ROBLOX*.lnk
	rm -rf "$HOME/.local/share/applications/wine/Programs/Roblox"
	sel=$(zenity \
		--title="$rlwversionstring" \
		--window-icon="$RBXICON" \
		--width=480 \
		--height=300 \
		--cancel-label='Exit' \
		--list \
		--text 'What option would you like?' \
		--radiolist \
		--column '' \
		--column 'Options' \
		TRUE 'Play Roblox' \
		FALSE 'Roblox Studio' \
		FALSE 'Select Wine Release' \
		FALSE 'Reinstall Roblox' \
		FALSE 'Uninstall Roblox' \
		FALSE 'Visit the GitHub page' 2>/dev/null )
	case $sel in
	'Play Roblox')
		xdg-open "http://www.roblox.com/games"; main;;
	'Roblox Studio')
		WINEDLLOVERRIDES="msvcp110.dll,msvcr110.dll=n,b;d3d11.dll=" rwine "$WINEPREFIX/drive_c/Program Files/Roblox/Versions/RobloxStudioLauncherBeta.exe" -ide
		main ;;
	'Reinstall Roblox')
		spawndialog question 'Are you sure you would like to reinstall?'
		if [[ "$?" = "0" ]]; then
			rm -rf "$HOME/.rlw"
			$WINESERVER -k
			rm -rf "$WINEPREFIX"
			roblox-install; winechooser; main
		else
			main
		fi;;
	'Uninstall Roblox')
		spawndialog question 'Are you sure you would like to uninstall?'
		if [[ "$?" = "0" ]]; then
			xdg-desktop-menu uninstall "roblox.desktop"
			rm -rf "$HOME/.rlw"
			rm -rf "$HOME/.local/share/icons/roblox.svg"
			rm -rf "$HOME/.local/share/icons/hicolor/scalable/apps/roblox.svg"
			rm -rf "$WINEPREFIX"
			rm -f "$HOME/.local/share/applications/roblox-player.desktop"
			rm -f "$HOME/.local/share/applications/roblox-studio.desktop"
			text='Roblox has been uninstalled successfully.'
			[[ "$WRAPPER_DIR" == "/usr/bin" ]] && text+="\nTo uninstall Roblox Linux Wrapper and not just the Roblox Wineprefix, please use your package manager."
			spawndialog info "$text"

			exit
		else
			main
		fi;;
	'Select Wine Release')
		winechooser
		main;;
	'Visit the GitHub page')
		xdg-open https://github.com/roblox-linux-wrapper/roblox-linux-wrapper
		main
	esac
}

WRAPPER_DIR=$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)
cd "$WRAPPER_DIR"

# Define some variables
man_args="-l rlw.6"
if [[ -d ".git" ]]; then
	rlwversion="$(git describe --tags)"
	git submodule init
	git submodule update
elif [[ "$WRAPPER_DIR" == "/usr/bin" ]]; then
	rlwversion="$(cat /usr/lib/roblox-linux-wrapper/version)"
	man_args="rlw"
else
	rlwversion='version-unknown'
fi
export WINEARCH=win32

export WINEPREFIX="$HOME/.local/share/wineprefixes/roblox-wine"
export PULSE_LATENCY_MSEC=60 # Workaround fix for crackling sound (variable used by wine)

rlwversionstring="Roblox Linux Wrapper $rlwversion"
printf '%b\n' "$rlwversionstring"

if [[ "$1" == "--help" || "$1" == "-h" ]]; then
	man $man_args
	exit 0
elif [[ "$1" == "--version" || "$1" == "-v" ]]; then
	# We already print the version above, so we're okay
	exit 0
fi

# Don't allow running as root
if [ "$(id -u)" == "0" ]; then
	spawndialog error "Roblox Linux Wrapper will not run as superuser. Exiting."
	exit 1
fi

# Make sure wine release is defined before continuing
if [[ ! -f "$HOME/.rlw/wine_choice" ]]; then
	printf "%b\n" "No Wine path has been saved yet, starting winechooser..."
	winechooser
fi
wineinitialize

roblox-install && main
